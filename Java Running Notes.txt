**********************
Java Season - 1
**********************

*******************************
Day 1 - 21 st august WEdnesday
*******************************


1996 

Features of Java : 

1) Simple 

-> syntax is similar to c++ 
-> removed most of  confusing or rarely used features 
	explicit pointers 
	operator overloading 
	
	+ - * / % 
	
	 
	2 + 3 = 5  here + acts as addition
	2 + 3 = 8  here +  acts as power 
-> No need to remove unreferenced objects because java has Garbage collector 

2) OO object oriented 

OOP is a methodology that simply the appor s/w development and maintenance

	- class
	- object
	- Encapsulation
	- Polymorphism
	- Inheritance
	- Abstraction
	
3) Robust 

	- Java uses Strong Memory managment 
	- Automatic Garbage Collector 
	- No pointers - avoids security problems 
	- Exception handling 
	
4) Secure 

5) Platform Independent (here Platform means OS operatoring system)

Dev				user1		user2		user3		user 4

Win8			win10		win11		ubuntu		macOS 

app 			Yes			Yes			No			No				Platform Dependent
				Yes			Yes			Yes			Yes 			Platform Independent
				

6) Architectural Neutral (Architectural means MicroProcessor and RAM )


Dev 			user1		user2		user3		user 4

i7				i3			celeron		AMD			CYREX

app				Yes			Yes			No			No	     Not Architectural Neutral

				Yes			Yes			Yes			Yes 

7) Portable ==> Computer Architecture 


			IBM				Apple 			Solaris 
			
			
Dev 		user1 			user2

IBM			Apple			Solaris

app			No				No				No portable 

			Yes				Yes             Portable 
			
Java is the first lang to become poratble 


=============================================================

Java :


JSE 

JDK 

how to install jdk ?

which version to downloaded ?

Latest version Java 22
JDK 21 is the latest long-term support release of Java SE Platform.


Interview Q : which veriso  of java or jdk ?

Ans : jdk 11 or JSE 11

download jdk-11.0.24_windows-x64_bin.exe 

??????????????????????????????????????
Assignment 1

Install jdk 11  and send the screenshot of below location

C:\Program Files\Java\jdk-11

send to below email id 

flmtechteam.testing@gmail.com

???????????????????????????????????????

*******************************
Day 2 - 22 nd august Thursday
*******************************

Java Configuration :

telling OS where our jdk folder exists 

In Environment Variables 

JAVA_HOME

C:\Program Files\Java\jdk-11

path 

C:\Program Files\Java\jdk-11\bin


how to check java configuration :

open cmd 

C:\Users\Riyaz>java -version
java version "11.0.24" 2024-07-16 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.24+7-LTS-271)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.24+7-LTS-271, mixed mode)

------------------------------------------------------------------------
JDK folders 

									jdk
									
									
			lib							bin						jre 


lib : 	

contains predefined stuff (API's) which helps in development or designing applictaions

	

								API  (Application Programming Interface)
								 |
								JAR  (Java Archive ~ zip file)
								 |
								Packages ( ~ folders)
								 |
							Classes 		Interfaces
							  |				      |
					----------------			---------------------
				   |                |		   |					  |
				Variables		Methods		Constants				Abstract MEthods
												or
											Fields
							
						


bin / tools /commands : 

javac  :  will compile a java file 

syntax :  javac FileName.java 

java : will excute the compile java file 

syntax : java FileName




jre : java runtime environment 


			JVM (Java Virtual Machine) -> abstract machine (some tasks but no body)


									JVM
									|
			  ------------------------------------------------------
			  |                      |                  			|
									
			CLSS					 EE								GC
									  |								 |
							-----------------				------------------
							|				 |				|				  |
						 Interpreter		JIT			  Mark				Sweep
											Compiler
						BC -> MC 			(Just in Time)
											Reptitive code / looping 
											(high performance)
			

CLSS : Class Loader Subsystem 

- loading 
- linking
- initialization 


*******************************
Day 3 - 23 rd august Friday
*******************************
EE : Execution Engine 

Garbage Collector:

System.gc();

Runtime.gc();


*************************************
Structure of Java Program
*************************************
4 Sections 


1. Documentation Section (optional)
2. Package Section (optional)
3. Import Section (based on your program)
4. Class/Interface Section 	(compulsory)	
									
									
Documentation Section  :

also called comments 

two types of comments 

1. single line // kjhkjhkjh
2. multiline comments 
/*  lkjlkj
kjhjkhjkh
khjkhjkh */
									

2. Package Section

logical grouping 


package packagename;


3. Import Section 


Hello.java:17: error: cannot find symbol
Scanner input=new Scanner(System.in);
^
  symbol:   class Scanner
  location: class Hello
Hello.java:17: error: cannot find symbol
Scanner input=new Scanner(System.in);
                  ^
  symbol:   class Scanner
  location: class Hello
2 errors

							
java.util


import packagename.*;  ==> not prefered in real time (because poor readabilty)

import packagename.ClassName;


Note : java.lang is base package of java program 
 No need of import statement for the classes present in java.lang 


*******************************
Day 4 - 26th August Monday
*******************************

Class/Interface Section 	(compulsory)

syntax :

access-specifier access-modifier class ClassName 
{

//variables 

//blocks

//methods 


}



e.g access-specifier :  public , private , protected , <default> or <unspecified>

e.g access-modifier : abstract , static , <default> or <unspecified>  etc ..

// if you want to run a java file , you should have main method 
					
					
typical class looks like this 

public class Hello
{


public static void main(String[] args)
{
  local declarations
  executable statements 
  local declarations
  executable statements 
}

}					

D:\FLM15thJuly>java Sample
Error: Main method not found in class Sample, please define the main method as:
   public static void main(String[] args)
or a JavaFX application class must extend javafx.application.Application


**************************************
Naming conventions in JAVA
**************************************

								Packages ( ~ folders)
								  	|
								------------------
							    |				 |
							Classes 		Interfaces
							  |				      |
					----------------			---------------------
				   |                |		   |					  |
				Variables		Methods		Constants				Abstract MEthods
												or
											Fields
											
											
Packages : (all lower case)

java.util

org.openqa.selenium 

regression 

day1

Classes or Interfaces :  TitleCase 

RamaKrishna


Scanner 

System

StringBuffer

ChromeDriver

Hello 

Sample 

ValidateLogin


--------------------------------------

Variables or Methods or Abstract Methods :  Camel Case (Lower Case + TitleCase)

e.g for variables:

x

netSalary

costOfItem

noOfLinks 


------------------------
methods : will have ( 

main(

nextInt(

println(

calculateSimpleInterest(


------------------------------------------------------

Constants or Fields : All upper case 


PI=3.14;

MAX_LIMIT=10000;

****************************************
JAVA MEMORY BLOCKS
****************************************

1. Class Area / Method Area
	- .Class File 
	- Static Variables
	- Static Methods 
	
2. Heap Area (Dynamic Memory Allocation)

	-Object
	-Arrays
	
3. Java Stack Area 

	- Local Declarations or Local variables
	- Expressions 
	- Current running logic /code 
	
4. String Constant Pool Area 

	only String literals e.g String s1="FLM";



*******************************
Day 5 - 27th August Tuesday
*******************************

^^^^^^^^^^^^^^^^^^^^^^^
Variables in JAVA
^^^^^^^^^^^^^^^^^^^^^^^^

-> reference to a memory blocks (holds data)

use : to store or hold a value for re-use 

int x=10;

SI=P*T*R/100;   ==> simplifies the expressions 

-> store once and recall anywhere in program

Syntax :

access-specifier access-modifier datatype variableName ; ==> declaration

variableName=value; assignment or initialization

access-specifier access-modifier datatype variableName = value ; ==> declaration and initialization


=> variables are classified based on location and behaviour into 3 types 
											
									Variables 



				Local					Instance				Static

5 points 

1. defnition?
2. when the memory allocation ?
3. Where memory allocation ?
4. calling style ?
5. life time or scope  ?

									
Local Variable : 											
											
1. defnition? 

variables which are declared inside a method   

2. when the memory allocation ?

only when that method is called 

3. Where memory allocation ?

JAVA stack area 

4. calling style ?

variableName itself 


5. life time or scope  ?	

till the end of method 


Note :  for local varibales it's the duty of programmer or developer to initialize some value 

VariablesDemo1.java:15: error: variable y might not have been initialized
System.out.println(y);
                   ^

Instance Variables :

1. defnition?
variable which are declared inside a class but outside of method (not having static keyword)

2. when the memory allocation ?

memory will be allocated only when object is created for that class 

3. Where memory allocation ?

Heap Area 

4. calling style ?

objectName.variableName

5. life time or scope  ?

till the last usage of object 				   
											
											
*******************************
Day 6 - 28th August WEdnesday
*******************************	


-----------------------
Static Variables									
											

1. defnition?
variable which are declared inside a class but outside of method having keyword static 

2. when the memory allocation ?

during .class file loading 

3. Where memory allocation ?

Class Area /Method Area 

4. calling style ?

ClassName.variableName

5. life time or scope  ?

till the end of program 

Note : we will go for static when we have some data that is "common" and can be "shared accross" 
											

-----------------------------------------------------------------

IDE : Integrated Development Environment

-> Eclipse / IntelliJ Idea / Net beans / VSCode etc ..

Eclipse : 

https://www.eclipse.org/downloads/

click on "Download Packages"

Latest version is "Eclipse IDE 2024-09"	

under "More Downloads"

click  on Eclipse 2023-12 (4.30)

Eclipse IDE for Enterprise Java and Web Developers  : 
Windows x86_64 

										
????????????????????????????????????????????????????
Assignment - 3

Download eclipse and create a java project in it

and send screenshot to below email id

flmtechteam.testing@gmail.com


????????????????????????????????????????????????????										


*******************************
Day 7 - 29th August Thursday
*******************************	

i=10 

int i=10;


										Datatypes 

				Primitive 							Non-primitive Datatypes
				
				
				
Type mismatch: cannot convert from int to byte

Type mismatch: cannot convert from int to short		

The literal 2147483648 of type int is out of range 

The literal 2147483648 of type int is out of range 			
				

Type mismatch: cannot convert from double to float

Data Type	Size	Description
byte	1 byte	Stores whole numbers from -128 to 127
short	2 bytes	Stores whole numbers from -32,768 to 32,767
int	4 bytes	Stores whole numbers from -2,147,483,648 to 2,147,483,647
long	8 bytes	Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
float	4 bytes	Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits
double	8 bytes	Stores fractional numbers. Sufficient for storing 15 decimal digits
boolean	1 bit	Stores true or false values
char	2 bytes	Stores a single character/letter or ASCII values									


*******************************
Day 8 - 30th August Friday
*******************************	

*******************************************************
Methods In Java 
*******************************************************
Methods 
	-> set of statements or instruction 
	-> that performs particular task 
	e.g println , nextInt()
	
	
Advantages : 

-> reusability
-> code clarity
-> avoids code redundancy 
-> length of code reduces
-> easy debugging of program

syntax :

access-specifier access-modifier return-type methodName(arguments/parameters)
{
local declarations;
statements ;
return value;

}

								Types 
							
							
				1.non-static 					2.Static 	


	non-static methods 			

1. defnition?

any method developed without static keyword  (<default> , final ,absrtact , etc ..)

2. when the memory allocation ?

during object creation 

3. Where memory allocation ?

Heap Area (along with objects)

4. calling style ?

objectName.methodName();

5. life time or scope  ?							
							
till the last usage of object 


---------------------------------------							
							
	Static Methods 
	

1. defnition?

any method developed with static keyword


2. when the memory allocation ?

while loading of .class files 

3. Where memory allocation ?

Class Area / Method Area 

4. calling style ?

ClassName.methodName();

5. life time or scope  ?	
	
till the end of program 	


					 
based on return-type and arguments/parameters 4 classifications 

1) Methods  no return type and no arguments/parameters
2) Methods no return-type and with arguments/parameters
3) Methods with return-type and no  arguments/parameters
4) Methods with return-type and arguments/parameters				
					
					
*******************************
Day 9 - 3rd September Tuesday
*******************************						
					
from now on : 

notes and programs will be available in below github link

https://github.com/flm15thjuly/JavaSeasons



*******************************
Day 10 - 4th September WEdnesday
*******************************						
		

3 things to be remembers while learning any method in java 


1. what's the arguments/parameters

2. what is the return type

3. overall what does this method 		




?????????????????????????????????????????????/
use the 4 variations of methods (static and non-static)
and write to calculateSimpleInterest 

Please send the programs to below email id 


flmtechteam.testing@gmail.com

???????????????????????????????????????????????????????????
 
 
**********************************
OOP - Object Oriented Programming
***********************************

POP - Procedure Oriented Programming

e.g C , PASCAL , FORTAN , COBOL etc ..


Simula - First Object Oriented Programming

Small talk - First pure Object Oriented Programming


Rules or Concepts :

Object
Class
Encapsulation
Polymorphism
Inheritance
Abstraction


-------------------------------------
Object : 

anything that exists is an object 

e.g Fan , Man , Dog , bank account number 


State - represent the data or attributes of an object 

for e.g Dog : breed , gender ,color 
for e.g bank account number : no of dgits , account type (checking , saving , current ) , IFSC code 

Variables 
----------------------------------------------------------
Behaviour : represents the operations / tasks of an object 

for e.g Dog :  eating , sleeping ,barking etc ..
for e.g bank account number : Transfer funds , recieve money 

methods 

------------------------------------------------------------------------------

Identity

is a unique ID used by JVM to identify each object uniquely 

-------------------------------------------------------------------------------------

Class : Blue print or a Template from where we can create an object 

class syntax :


access-specifier access-modifier class ClassName
{

varibales;
methods ;


}

=================================================
Object Creation Techniques 
=================================================
1. using new operator

ClassName objectName=new ClassName();

2. using Static Factory Method (SFM) 

ClassName objectName=ClassName.methodName();

3. using Non-Static Factory Method (NSFM) 

ClassName1 object1=new ClassName1();

ClassName2 object2=object1.methodName();

XSSFWorkbook
XSSFSheet

XSSFWorkbook wb=new XSSFWorkbook();
XSSFSheet ws=wb.getSheet();

4. using cloning (used by developers) 

5. using literals 

ClassName object=value;

e.g String str="FLM";

Integer i=100;

6. using deserialization 
No syntax (implicite operation used by jvm) 



===============================================
Encapsulation
===============================================

Encapsulation in Java is a process of wrapping code and data together into a single unit, 
for example, a capsule which is mixed of several medicines.


Encapsulation = Data hiding + Abstraction

The field Bank.balance is not visible


Data hiding , we use private access-specifier 

getters are public methods used to retrive or return private variable 

setters are public methods to midify or alter or change the private 


m1(int a,int b,int c)

08:56:25


PrintStream (java.io)


print   ==> will print and stays in same line 

*
* *
* * * * 
* * * * *

5 4 3 2 1
4 3 2 1
3 2 1
2 1
1


println ==> will print and moves the cursor to next line 

printf  ==> will format the output as you wish and cursor will stay in same line 

format ==> will format the output as you wish and cursor will stay in same line


*******************************
Day  - 13th September Friday
*******************************	

this : 

if we have local variable names same as instance variables , local variables will dominate .
to overcome this situation we use this keyword to refer current calling object reference 
- is a keyword cum operator
- predefined non static variable 
- this represents current calling object reference 					
		
		
***************************
Polymorphism
***************************

Poly means many 

morph means forms 		


							Polymorphism
							
							
				Static 							Dynamic  (this will be discussed after inhertance topic)
					or
				Compile time					Runtime
					or
				Early Binding					Late Binding
						
hint : Binding means mapping of caller and called method 						
							
Static Polymorphism:
 can be achived by 2 ways 

- Operator Overloading (java doesn't support)
- Method Overloading  
			- difference in datatypes 
				e.g add(int x,int y)
					add(double x, double y)
					add(long x,long y)
			- show variance in no of arguments 	
					add(int x,int y)
					add(int x,int y,int z)
			- change in order of arguments (few cases works not always better avoid this )
				setDetails(int rollNo,String sName)
				setDetails(String sName,int rollNo)
							
							
The method add(int, int) in the type Sum is not applicable for the arguments (double, double)

The method add(int, int) in the type Sum is not applicable for the arguments (long, long)	


Method Signature = Method Name + Arguments 

	Method Overloading is applicable for the methods present in same class 
	
	
e.g from Java 


println()
println(boolean)
println(char)
println(char[])
println(double)
println(float)
println(int)
println(Object)
println(String)
println(long)


??????????????????????????????????????????????????????

Write a program to generate Aadhaar  number 

Write a class called Aadhaar  

getAadhaar

e.g 2345 1456 7894

hint: use (int) (Math.random()*10000)

send this assignment to below email id 

flmtechteam.testing@gmail.com 

?????????????????????????????????????????????????????

*******************************
Day  - 16th September Friday
*******************************	


					In OOPs
				
				
		contructors 			destructors		
				
		java supports			java doesn't suuports
		
		
		
contructor:

syntax :

access-specifier ClassName(arguments/parameters)
{
local declarations;
statements ;

}	
		
		
ChromeDriver (C): 

new ChromeDriver(); ==> is a constructor given by selenium community , where it starts the chrome browser

Def : 

A constructor is nothing but method having same name as ClassName (case sensitive)

rules and precautions :

1) Constructor name must match the name of the class

2) Constructor takes arguments/parameters but doen't have return-type 

Q : what happens if we specify a return-type to constructor
Ans : No error , it will be treated as a normal or concrete method 

3) Constructors shouldn't have modifier 
		
		
Q: what happens if we specify a modifier 

Ans: Compilation Error :

Illegal modifier for the constructor in type Sum; only public, protected & private are permitted

4) access-specifier shold be either 

public or protected 

private or default are not prefered 


									Constructors
									
									
				default									parameterized 

				or 
				
				no arguments 
									
									
									
									
*******************************
Day  - 18th September WEdnesday
*******************************			

Inheritance (cont ..)

Simple 

MultiLevel

Hiererichal 


+++++++++++++++++++++
Method Overriding
++++++++++++++++++++++

Def : The process of provding replacement for exiting method functionality 
with seom new functionality .

Dynamic or Runtime or Late binding Polymorphism

	//case 1 
		
		//A obj=new A();
		
		//case 2
		
		//B obj=new B();
		
		//case 3
		
		//B obj=new A();  ==> not valid 
		
		//case 4
		
		A obj=new B();
		
		System.out.println(obj.x);
		obj.m1();
		

===========================
negative cases for Method overriding

1) parent class access-specifier shouldn't be private 
2) parent class shouldn't be declared as final (access-modifier)
3) parent class access-modifier shouldn't be mentioned as static  ==>Method Overhiding 


========================================================


									
*******************************
Day  - 19th September Thursday
*******************************			

Abstraction is nothing but showing the high level idea 
and hiding or giving chance to next level to imagine or implement as per thier requirement.							


							Abstraction
					
					
			abstract class 						Interfaces
			
			(0 to 100 %) 						100%
			
			
	Abstract Class : 		
			
	Cannot instantiate the type Numbers				
	
	
Interface:

syntax :

access-specifier interface InterfaceName 
{

//constants or Fields 

//abstract methods 


}


*******************************
Day  - 1st October Tuesday
*******************************		

Operators in Java :


Ternary Operators (Conditional operator or Decission making operator)

? : ==> alternate if condition 

	expr1 		? 	expr2 	: expr3 ;
	
	condition	   True	part  False part 			
	or
	Comparision

	
Concat Operator : 

+ 
String s1="FLM";
String s2="Java";

System.out.println(s1+s2);  // FLMJava 

member operator : 

. 

System.out.

java.lang 

this 

new 

instanceOf 



*******************************
Day  - 3 rd  October Tuesday
*******************************		

				Flow Control or Control Flow statements
				
				
				
		Selection statements					Iterative 							Transfer
		or										or									or
		Decission making statements				Looping Statements					Jump statements
		
		i) if - else 						    i) while()							i) break
		ii) switch								ii) do while()						ii) continue
												iii) for loop 						iii) return
												iv) for each loop 					iv) try - catch - finally
																					v) Assert 
																					
																					
Selection statements or 	Decission making statements	

i) if - else

if(Condition or expression which should give boolean )
{
//statements 

}
else 
{
//statements

}

																				
																				
Note :

for String comparision == is not good choice 

why ? because here refrences(memory alloctaion reference or id ) are compared 		not the value 

then how ? use equals methods of String to compare values 


Switch syntax :


switch(expression or values or variable)
{

case value1 :  statements 
			   break ;
			   
case value2 :  statements 
			   break ;
			   
			   :
			   :
			   
case valuen :  statements
				break ;
	
default : statements	

}


expression or values or variable
Accepted :

byte
short
int -2147483648 to 2147483647
char 
String 



Not accepted : 


long +9223372036854775808 to  -9223372036854775808
float 
double 
boolean 

Cannot switch on a value of type long. Only convertible int values, strings or enum variables are permitted
																
	

???????????????????????????????????????????????????
Assignment 

use Switch case to launch browser of your choice 

chrome / firefox / edge 

???????????????????????????????????????????????????????	



Looping Statements or Iterative :



for loop 

	1				2	5	8			4 7
for(initialization ; condition check ; step increment/ decrement)
{

statements   3  6


}


while loop :

if you are not aware of how many times you want to excute the statements 

syntax 

intialization ;
while(condition) 
{

statements 

step increment/decrement;


}


syntax :


do
{
body or statement;
}
while(condition);


Jump statements or Transfer statements;

break statement 

continue statement 

note : continue used to skip the remaining instructions in current iteration and continnue with next iteration


return : 

******************************************
Arrays

what is an array ?


int x=10;


		10		20		30		40		50	
	
	a   0   	1   	2   	3   	4
	
	   a[0] 	a[1] 	a[2] 	a[3] 	a[4]
		
		x   y   z   a   b 
		
array is an index based collection of similar or homogenous data types elements having fixed length or size 

syntax : 

Method 1: 

	access-specifier access-modifier datatype[] arrayName; declaration    e.g     int[] a ;
	
	arrayName={value1,value2...value3}           e.g        a={10,20,30,40,50}; initialization
	
	
	
	int x;  variable declaration
	x=10;  assignment or intialization
	
	int x=10; varibale declaration and initialization
	
	syso(x);
	
	int[] a; array declaration
	a={10,20,30,40,50}; array initialization
	
	int[] a={10,20,30,40,50}; Array declaration and initialization
	
	syso(a[0]);
	syso(a[1]);
	syso(a[2]);
	syso(a[3]);
	syso(a[4]);
	
	length : is a variable or field ==> which gives no of elements in an array 
	
	how to use : arrayName.length 
	

Method 2 : using new operator 

		access-specifier access-modifier datatype[] arrayName; declaration  e.g  int[] a ;
		
		arrayName=new datatype[no of items]; initialization  e.g a=new int[5];
		
		access-specifier access-modifier datatype[] arrayName=new datatype[no of items];
		
		e.g int[] a=new int[5];
		
		
Disadvantages of arrays :

1) No growable nature 

2) only store similar or homogenous datatypes 

3) no predeined methods or data structures 


	1	2	3	4	5
	1	4	9	16	25
	
	datatype[][] a=new datatype[no of rows][no of colums];
	
	int[][] a=new int[2][5];
	
===============================================================
		Collection Framework (API) 
		Packages 
		Classes and Interfaces 
		
		
										Iterable(I)
										   |
										Collection(I)
											|
					------------------------------------------------------
					|
					List(I)					Queue(I)					Set(I)
					-ArrayList(C)											- HashSet(C)
					-LinkedList(C)											- LinkedHashSet(C)
					-Vector(C)												- SortedSet(I)
					-Stack(C)												- TreeSet(C) 
					
					
Methods in Collection (I) 

add(E):boolean   here E is Element of any datatype

size():int  here size means no of elements present in the collection 

contains(Object):boolean

isEmpty():boolean  

------------------------------------------------------------

Methods in List (I) :

get(int):E 

-------------------------------------------------------------

ArrayList(C)


ArrayList()
ArrayList(int)
ArrayList(Collection<? extends E>)


------------------------------------------------------------------
Generics 

--------------------------------------------------------------------
Enhanced for loop or For-each loop 

applied for arrays and collections 


for(datatype temp:arrayName or CollectionName)
{

//use temp 

}

int[] a=new int[5];

		a[0]=10;
		a[1]=200;
		a[2]=300;
		a[3]=400;
		a[4]=50;
		
normal for loop :

		for(int i=0;i<a.length;i++)
		{
			System.out.println(a[i]);
		}		
		
for each loop :
	   for(int temp:a)
	   {
	     System.out.println(temp);
	   }
	   
--------------------------------------------
Methods in List (I) :

no get method in Set 

----------------------------------------------
HashSet(C) : doesn't allow duplicates 

HashSet()
HashSet(int)
HashSet(int, float)  here float means loading factor 
HashSet(int, float, boolean)
HashSet(Collection<? extends E>)